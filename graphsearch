import networkx as nx
import my_queue

my_queue.clear()

nodes = ['a', 'b', 'c', 'd', 'e', 'f']

G = nx.Graph()
G.add_nodes_from(nodes)

G.add_edge('a', 'd')
G.add_edge('a', 'b')

G.add_edge('b', 'a')
G.add_edge('b', 'c')
G.add_edge('b', 'd')

G.add_edge('c', 'b')
G.add_edge('c', 'd')

G.add_edge('d', 'a')
G.add_edge('d', 'b')
G.add_edge('d', 'c')
G.add_edge('d', 'e')
G.add_edge('d', 'f')

G.add_edge('e', 'd')
G.add_edge('e', 'f')

G.add_edge('f', 'd')
G.add_edge('f', 'e')

# print (G['d'])


print (G.nodes)
print (G.edges)

my_queue.enqueue('a')
visited = ['a']

xstep = 1
while len(my_queue.queue) > 0:
    print('step=', xstep)
    print('queue=', my_queue.queue)
    print('visited=', visited)
    node = my_queue.dequeue()
    print('dequeue node=>', node)
    print('queue2=', my_queue.queue)

    if input('Exit - 0') == '0':
        break

    # visited.append(node)
    nd = G[node]  # lst2 = list(G.neighbors()) #print (nd.keys())

    for x in nd:
        if x not in visited:
            print("enqueue", x)
            visited.append(x)
            my_queue.enqueue(x)

    xstep += 1
    print('LEN=', len(my_queue.queue))

print('DONE:', visited)


