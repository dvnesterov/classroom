import networkx as nx
import my_queue

my_queue.clear()

lst = ['a', 'b', 'c', 'd', 'e', 'f']

G = nx.DiGraph()
G.add_nodes_from(lst)

G.add_edge('a', 'd')
G.add_edge('a', 'b')

G.add_edge('b', 'a')
G.add_edge('b', 'c')
G.add_edge('b', 'd')

G.add_edge('c', 'b')
G.add_edge('c', 'd')

G.add_edge('d', 'a')
G.add_edge('d', 'b')
G.add_edge('d', 'c')
G.add_edge('d', 'f')
G.add_edge('d', 'e')

G.add_edge('e', 'd')
G.add_edge('e', 'f')

G.add_edge('f', 'd')
G.add_edge('f', 'e')

# print (G['d'])

my_queue.enqueue('a')
visited = []

while True:
    print('queue=', my_queue.queue)
    print('visited=', visited)
    node = my_queue.dequeue()
    print('node=>', node)
    visited += [node]
    nd = G[node]
    #lst2 = list(G.neighbors())
    #print (nd.keys())
    for x in nd:
        if not (x in visited):
            print(x)
            visited += [x]
            my_queue.enqueue(x)
    if input('Exit - 0') == '0':
        break


