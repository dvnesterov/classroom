class Date:
    DAY_OF_MONTH = ((31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31),
                    (31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31))

    def __init__(self, year, month, day):

        if year < 0:
            raise ValueError
        if month > 12 or month < 1:
            raise ValueError

        self.day = day
        self.month = month
        self.year = year

    @property
    def date(self):
        return f'{self.day}.{self.month}.{self.year}'

    @date.setter
    def date(self, value):
        self.day, self.month, self.year = map(int, value.split('.'))

    @classmethod
    def check_day(cls, year, month, day):
        if cls.is_leap_year(year):
            print('is L')
            print(cls.DAY_OF_MONTH[1])
            

        else:
            print('isnt L')
            print(cls.DAY_OF_MONTH[0])
            pass
        pass

    @staticmethod
    def is_leap_year(year):
        if year % 4 != 0 or (year % 100 == 0 and year % 400 != 0):
            return False
        else:
            return True

    def add_day(self, shift):
        self.day += shift
        pass

    def add_month(self, shift):
        pass

    def add_year(self, shift):
        pass


d = Date(2005, 12, 11)
d.date = '22.02.2018'
print(d.day, type(d.day))
print(d.date, type(d.date))
v = d.check_day(2008, 12, 11)
print(v)
